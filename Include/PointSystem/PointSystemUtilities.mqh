//+------------------------------------------------------------------+
//|                                                      STRUCTS.mqh |
//|                        Copyright 2013, MetaQuotes Software Corp. |
//|                                              http://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2013, MetaQuotes Software Corp."
#property link      "http://www.mql5.com"
//+------------------------------------------------------------------+
//| библиотека структур данных для получения сигналов                |
//+------------------------------------------------------------------+

// перечисление типов сигналов

enum SIGNAL_TYPE
 {
  CROSS_EMA=0  // это для примера от балды пока что временно
 };
 
// структура хранения сигналов и количества баллов

struct sPoint
 {
  SIGNAL_TYPE signal;  // тип сигнала
  int point_value;     // количество баллов
 };

// структура EMA

struct sEmaParams
 {
  int handleEMA3;   
  int handleEMAfast;           // период быстрой EMA на страршем таймфрейме
  int handleEMAfastJr;            // период быстрой EMA на младшем таймфрейме
  int handleEMAslowJr;            // период медленной EMA на младшем таймфрейме
 };
 
// структура MACD

struct sMacdParams
 {
  int handleMACD;
 };

// структура параметров Стохастика

struct sStocParams
 {
  int handleStochastic;
  int top_level;                  // Top-level стохастка
  int bottom_level;               // Bottom-level стохастика
 };
 
// структура параметров PriceBasedIndicator
struct sPbiParams
 {
  int handlePBI;
  int historyDepth;                            // глубина истории для расчета
 };
// структура сделок
struct sDealParams
 {
  double orderVolume;                          // Объём сделки
  int sl;                                 // Stop Loss
  int tp;                                 // Take Profit
  int trStop;                                  // Trailing Stop
  int trStep;                                  // Trailing Step
  int minProfit;                               // Minimal Profit 
 };
 
// структура базовых настроек
struct sBaseParams
 {
  ENUM_TIMEFRAMES eldTF;             //
  ENUM_TIMEFRAMES curTF;          // 
  ENUM_TIMEFRAMES jrTF;              //
  bool useJrEMAExit;               // будем ли выходить по ЕМА
  int posLifeTime;                // время ожидания сделки в барах
  int deltaPriceToEMA;            // допустимая разница между ценой и EMA для пересечения
  int deltaEMAtoEMA;              // необходимая разница для разворота EMA
  int waitAfterDiv;               // ожидание сделки после расхождения (в барах)
 };