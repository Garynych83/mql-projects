//+-------------------------------------------------------------------------------+
//|                                                      ServicesMT4.mqh          |
//|                                                      Copyright © Zhunko       |
//|16.10.2010 - 22.09.2012                               MF ZHUNKO vadim@zhunko.ru|
//+-------------------------------------------------------------------------------+
//| Заголовочный файл библиотеки "ServicesMT4.dll".                               |
//+-------------------------------------------------------------------------------+
//| Библиотека "ServicesMT4.dll" содержит 143 сервисных функций для терминала МТ4.|
//| Функции, описание которых начинается с заглавных букв, защищены и достуны     |
//|только зарегистрированным пользователям.                                       |
//+-------------------------------------------------------------------------------+
//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
//==== Коды локализации МТ4. ==================================================================================================================================
#define LL_ENGLISH                    0x7D00 // 32000 Английский язык.
#define LL_ARABIC                     0x7D01 // 32001 Арабский язык.
#define LL_BULGARIAN                  0x7D02 // 32002 Болгарский язык.
#define LL_CHINESE_SIMPLE             0x7D03 // 32003 Китайский (простой) язык.
#define LL_CHINESE_TRADITIONAL        0x7D04 // 32004 Китайский (традиционный) язык.
#define LL_CROATIAN                   0x7D05 // 32005 Хорватский язык.
#define LL_CZECH                      0x7D06 // 32006 Чешский язык.
#define LL_DANISH                     0x7D07 // 32007 Датский язык.
#define LL_DUTCH                      0x7D08 // 32008 Голландский язык.
#define LL_ESTONIAN                   0x7D09 // 32009 Эстонский язык.
#define LL_FARSI                      0x7D1A // 32010 Фарси.
#define LL_FRENCH                     0x7D1B // 32011 Французкий язык.
#define LL_GERMAN                     0x7D1C // 32012 Немецкий язык.
#define LL_GREEK                      0x7D1D // 32013 Греческий язык.
#define LL_HEBREW                     0x7D1E // 32014 Иврит.
#define LL_HUNGARIAN                  0x7D1F // 32015 Венгерский язык.
#define LL_INDONESIAN                 0x7D10 // 32016 Индонезийский язык.
#define LL_ITALIAN                    0x7D11 // 32017 Итальянский язык.
#define LL_JAPANESE                   0x7D12 // 32018 Японский язык.
#define LL_KOREAN                     0x7D13 // 32019 Корейский язык.
#define LL_LATVIAN                    0x7D14 // 32020 Латвийский язык.
#define LL_LITHUANIAN                 0x7D15 // 32021 Литовский язык.
#define LL_MONGOLIAN                  0x7D16 // 32022 Монгольский язык.
#define LL_POLISH                     0x7D17 // 32023 Польский язык.
#define LL_PORTUGUESE                 0x7D18 // 32024 Португальский язык.
#define LL_RUSSIAN                    0x7D19 // 32025 Русский язык.
#define LL_SERBIAN                    0x7D1A // 32026 Сербский язык.
#define LL_SLOVAK                     0x7D1B // 32027 Словацкий язык.
#define LL_SPANISH                    0x7D1C // 32028 Испанский язык.
#define LL_SWEDISH                    0x7D1D // 32029 Шведский язык.
#define LL_TURKISH                    0x7D1E // 32030 Турецкий язык.
#define LL_VIETNAMESE                 0x7D1F // 32031 Вьетнамский язык.
//==== Значения первого параметра функции "ServiceLoadingQuotes()". ===========================================================================================
#define MLQ_STOP_TF                        0 // Прекращение загрузки котировок по текущему ТФ и переход к следующему ТФ.
#define MLQ_CONTINUED                      1 // Загрузка котировок по текущему ТФ продолжается.
#define MLQ_FINISH                         2 // Завершение функции потока.
//==== Константы для второго параметра функции "ServiceSetViewChart()". =======================================================================================
#define VS_BARS                            0 // Бары.
#define VS_CANDLES                         1 // Японские свечи.
#define VS_LINE                            2 // Линия.
//==== Диалоговое окно свойств графика. =======================================================================================================================
#define PC_OK                         0x0001 // Кнопка "OK".
#define PC_CANCEL                     0x0002 // Кнопка "Отмена".
#define PC_RESET                      0x3021 // Кнопка "Сброс".
#define PC_TAB_CONTROL                0x3020 // Панель вкладок.
//---- Вкладка "Цвет". ----------------------------------------------------------------------------------------------------------------------------------------
#define PC_COLOR_SCHEME               0x0503 // Цветовая схема.
#define PC_COLOR_BACKGROUND           0x041A // Фон.
#define PC_COLOR_FOREGROUND           0x0421 // Текст.
#define PC_COLOR_GRID                 0x0483 // Сетка.
#define PC_COLOR_BAR_UP               0x041C // Бар верх.
#define PC_COLOR_BAR_DOWN             0x041B // Бар низ.
#define PC_COLOR_BULL_CANDLE          0x041E // Бычья свеча.
#define PC_COLOR_BEAR_CANDLE          0x041D // Медвежья свеча.
#define PC_COLOR_LINE_GRAPH           0x049B // Линия.
#define PC_COLOR_LINE_VOLUMES         0x0569 // Объёмы.
#define PC_COLOR_ASK_LINE             0x03F7 // Линия ASK.
#define PC_COLOR_STOP_LEVELS          0x0535 // Уровни стопа.
//---- Вкладка "Общие". ---------------------------------------------------------------------------------------------------------------------------------------
#define PC_COMMON_OFFLINE_CHART       0x04E9 // Автономный график.
#define PC_COMMON_FOREGROUND          0x04E4 // График сверху.
#define PC_COMMON_SHIFT               0x04EF // Смещение графика.
#define PC_COMMON_AUTOSCROLL          0x04ED // Автопрокрутка графика.
#define PC_COMMON_BAR_CHART           0x04E1 // Вид графика - бары.
#define PC_COMMON_CANDLESTICKS        0x04E2 // Вид графика - японские свечи.
#define PC_COMMON_LINE_CHART          0x04E6 // Вид графика - линия.
#define PC_COMMON_OHLC                0x04EA // Показывать OHLC.
#define PC_COMMON_ASK                 0x04E0 // Показывать линию ASK.
#define PC_COMMON_PERIOD_SEPARATORS   0x04EE // Показывать разделители периодов.
#define PC_COMMON_GRID                0x04E5 // Показывать сетку.
#define PC_COMMON_VOLUMES             0x04F0 // Показывать объёмы.
#define PC_COMMON_OBJECT_DESCRIPTIONS 0x04E3 // Показывать описания объектов.
#define PC_COMMON_SCALE_FIX_1_TO_1    0x04EC // Фиксировать масштаб 1:1.
#define PC_COMMON_SCALE_FIX           0x04EB // Фиксировать масштаб.
#define PC_COMMON_FIXED_MAX           0x04E7 // Максимум.
#define PC_COMMON_FIXED_MIN           0x04E8 // Минимум.
//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
#import "ServicesMT4.dll"
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 1. ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ БИБЛИОТЕКИ.
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 1.1. ФУНКЦИЯ инициализирует библиотеку для работы из удалённого процесса. Для текущего процесса функцию можно не вызывать.
 //      Библиотека для текущего процесса инициализируется автоматически. Повторная инициализация по умолчанию невозможна.
//       В этом случае необходимо явно указывать идентификатор процесса.
 void ServiceInit(int dwProcessID); // Идентификатор процесса. Если процесс текущий можно указать NULL.
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 2. ФУНКЦИИ ДЛЯ РАБОТЫ С ОКНОМ ТЕРМИНАЛА МТ4.
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 2.1. Функции идентификации терминала МТ4.
 //=====================================================================================================================================================================
 // 2.1.1. Функция возвращает полный путь к каталогу терминала МТ4 со слешем в конце пути.
 string ServiceGetPathDirectoryMT4();
 //=====================================================================================================================================================================
 // 2.1.2. Функция возвращает полный путь к каталогу истории терминала МТ4 со слешем в конце пути.
 string ServiceGetPathServer();
 //=====================================================================================================================================================================
 // 2.1.3. Функция возвращает системный дескриптор окна терминала МТ4.
 int ServiceHandleMT4();
 //=====================================================================================================================================================================
 // 2.1.4. Функция возвращает идентификатор процесса терминала МТ4.
 int ServiceGetProcessId();
 //=====================================================================================================================================================================
 // 2.2. Функции управляющие окном терминала МТ4.
 //=====================================================================================================================================================================
 // 2.2.1. Функция закрывает окно терминала МТ4. Функция возвращает TRUE, если сообщение поставлено в очередь, иначе - FALSE.
 bool ServiceMetaTraderClose();
 //=====================================================================================================================================================================
 // 2.2.2. Функция меняет стиль окна терминала МТ4.
 void ServiceMetaTraderTitle(int bTitle); // Флаг устанавливает стиль главного окна МТ4. FALSE - окно без заголовка, TRUE - окно с заголовком.
 //=====================================================================================================================================================================
 // 2.2.3. Функция скрывает окно терминала МТ4. Функция возвращает TRUE, если окно перед этим было видимо, иначе - FALSE.
 bool ServiceMetaTraderHide();
 //=====================================================================================================================================================================
 // 2.2.4. Функция управляет горячими клавишами терминала МТ4.
 void ServiceMetaTraderHotKeys(int nKey,     // Код горячей клавиши 1.
                               int nKeyMod); // Код горячей клавиши 2. Может быть только предопределённым значением:
                                             //  VK_SHIFT	    Кнопка SHIFT.
                                             //  VK_CONTROL	  Кнопка CTRL.
                                             //  VK_MENU	     Кнопка ALT.
                                             //  VK_LWIN	     Левая кнопка WINDOWS.
                                             //  VK_RWIN	     Правая кнопка WINDOWS.
 //=====================================================================================================================================================================
 // 2.2.5. Функция нажимает клавишу в окне терминала МТ4.
 void ServiceMetaTraderKeyDown(int nKey); // Код клавиши.
 //=====================================================================================================================================================================
 // 2.2.6. Функция развёртывает окно терминала МТ4. Функция возвращает TRUE, если окно перед этим было видимо, иначе - FALSE.
 bool ServiceMetaTraderMaximize();
 //=====================================================================================================================================================================
 // 2.2.7. Функция свёртывает окно терминала МТ4. Функция возвращает TRUE, если окно перед этим было видимо, иначе - FALSE.
 bool ServiceMetaTraderMinimize();
 //=====================================================================================================================================================================
 // 2.2.8. Функция активизирует и показывает на экране окно терминала МТ4. Функция возвращает TRUE, если окно перед этим было видимо, иначе - FALSE.
 bool ServiceMetaTraderRestore();
 //=====================================================================================================================================================================
 // 2.2.9. Функция показывает окно терминала МТ4. Функция возвращает TRUE, если окно перед этим было видимо, иначе - FALSE.
 bool ServiceMetaTraderShow();
 //=====================================================================================================================================================================
 // 2.2.10. ФУНКЦИЯ подменяет номер аккаунта в заголовке главного окна терминала МТ4. Функция работает только из потока терминала МТ4.
 void ServiceSetAccountNumber(int nAccountNumber); // Номер аккаунта для замены в заголовке главного окна терминала МТ4.
 //=====================================================================================================================================================================
 // 2.3. Функции, показывающие/скрывающие основные окна терминала МТ4.
 //=====================================================================================================================================================================
 // 2.3.1. Функция скрывает окно "Окно данных" терминала МТ4.
 void ServiceHideDataWindow();
 //=====================================================================================================================================================================
 // 2.3.2. Функция скрывает окно "Обзор рынка" терминала МТ4.
 void ServiceHideMarketWatch();
 //=====================================================================================================================================================================
 // 2.3.3. Функция скрывает окно "Навигатор" терминала МТ4.
 void ServiceHideNavigator();
 //=====================================================================================================================================================================
 // 2.3.4. Функция скрывает окно "Терминал" терминала МТ4.
 void ServiceHideTerminal();
 //=====================================================================================================================================================================
 // 2.3.5. Функция скрывает окно "Тестер" терминала МТ4.
 void ServiceHideTester();
 //=====================================================================================================================================================================
 // 2.3.6. Функция возвращает TRUE, если окно "Окно данных" терминала МТ4 видимо, иначе - FALSE.
 bool ServiceIsVisibleDataWindow();
 //=====================================================================================================================================================================
 // 2.3.7. Функция возвращает TRUE, если окно "Обзор рынка" терминала МТ4 видимо, иначе - FALSE.
 bool ServiceIsVisibleMarketWatch();
 //=====================================================================================================================================================================
 // 2.3.8. Функция возвращает TRUE, если окно "Навигатор" терминала МТ4 видимо, иначе - FALSE.
 bool ServiceIsVisibleNavigator();
 //=====================================================================================================================================================================
 // 2.3.9. Функция возвращает TRUE, если окно "Терминал" терминала МТ4 видимо, иначе - FALSE.
 bool ServiceIsVisibleTerminal();
 //=====================================================================================================================================================================
 // 2.3.10. Функция возвращает TRUE, если окно "Тестер" терминала МТ4 видимо, иначе - FALSE.
 bool ServiceIsVisibleTester();
 //=====================================================================================================================================================================
 // 2.3.11. Функция показывает окно "Окно данных" терминала МТ4.
 void ServiceShowDataWindow();
 //=====================================================================================================================================================================
 // 2.3.12. Функция показывает окно "Обзор рынка" терминала МТ4.
 void ServiceShowMarketWatch();
 //=====================================================================================================================================================================
 // 2.3.13. Функция показывает окно "Навигатор" терминала МТ4.
 void ServiceShowNavigator();
 //=====================================================================================================================================================================
 // 2.3.14. Функция показывает окно "Терминал" терминала МТ4.
 void ServiceShowTerminal();
 //=====================================================================================================================================================================
 // 2.3.15. Функция показывает окно "Тестер" терминала МТ4.
 void ServiceShowTester();
 //=====================================================================================================================================================================
 // 2.4. Сервисные функции терминала МТ4.
 //=====================================================================================================================================================================
 // 2.4.1. Функция возвращает код языковой локализации терминала МТ4: LL_ENGLISH - английский язык;
 //                                                                   LL_RUSSIAN - русский язык.
 int ServiceGetLocalization();
 //=====================================================================================================================================================================
 // 2.4.2. Функция открывает окно "Глобальные переменные". В случае успеха функция возвращает системный дескриптор открытого окна "Глобальные переменные", иначе - NULL.
 int ServiceOpenGlobalVariables();
 //=====================================================================================================================================================================
 // 2.4.3. Функция открывает окно "Архив котировок". В случае успеха функция возвращает системный дескриптор открытого окна "Архив котировок", иначе - NULL.
 int ServiceOpenHistoryCenter();
 //=====================================================================================================================================================================
 // 2.4.4. Функция открывает окно "Настройки" с активной указанной вкладкой. В случае успеха функция возвращает системный дескриптор открытого окна "Настройки", иначе - NULL.
 int ServiceOpenOptions(int nTab); // Номер вкладки окна "Настройки".
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 3. ФУНКЦИИ ДЛЯ РАБОТЫ СО СВОЙСТВАМИ ГРАФИКА.
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 3.1. Функции переключения свойств графика.
 //=====================================================================================================================================================================
 // 3.1.1. Функция включает/отключает автопрокрутку указанного графика.
 void ServiceAutoScroll(int hwndChart); // Системный дескриптор окна графика, на котором отключается автопрокрутка.
 //=====================================================================================================================================================================
 // 3.1.2. Функция включает/отключает смещение указанного графика. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceShift(int hwndChart); // Системный дескриптор окна графика, на котором включается/отключается смещение.
 //=====================================================================================================================================================================
 // 3.1.3. Функция включает/отключает отображение сетки на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceShowGrid(int hwndChart); // Системный дескриптор окна графика, на котором включается/отключается отображение сетки.
 //=====================================================================================================================================================================
 // 3.1.4. Функция включает/отключает отображение объёмов на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceShowVolume(int hwndChart); // Системный дескриптор окна графика, на котором включается/отключается отображение объёмов.
 //=====================================================================================================================================================================
 // 3.2. Функции получения свойств графика.
 //=====================================================================================================================================================================
 // 3.2.1. Функция возвращает состояние автопрокрутки на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetAutoScroll(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние автопрокрутки.
 //=====================================================================================================================================================================
 // 3.2.2. Функция возвращает состояние "Фиксировать масштаб" на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetScaleFix(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние "Фиксировать масштаб".
 //=====================================================================================================================================================================
 // 3.2.3. Функция возвращает состояние "Фиксировать масштаб 1:1" на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetScaleFix1To1(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние "Фиксировать масштаб 1:1".
 //=====================================================================================================================================================================
 // 3.2.4. Функция возвращает состояние "График сверху" на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetForeground(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние "График сверху".
 //=====================================================================================================================================================================
 // 3.2.5. Функция возвращает состояние автономности указанного графика. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetOffline(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние автономности.
 //=====================================================================================================================================================================
 // 3.2.6. Функция возвращает состояние смещения указанного графика. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShift(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние смещения.
 //=====================================================================================================================================================================
 // 3.2.7. Функция возвращает состояние отображения линии ASK на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShowAsk(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние отображения линии ASK.
 //=====================================================================================================================================================================
 // 3.2.8. Функция возвращает состояние отображения сетки на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShowGrid(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние отображения сетки.
 //=====================================================================================================================================================================
 // 3.2.9. Функция возвращает состояние отображения описания объектов на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShowObjectDescript(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние отображения описания объектов.
 //=====================================================================================================================================================================
 // 3.2.10. Функция возвращает состояние отображения цен OHLC на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShowOHLC(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние отображения цен OHLC.
 //=====================================================================================================================================================================
 // 3.2.11. Функция возвращает состояние отображения разделителей периодов на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShowPeriodSeparators(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние отображения разделителей периодов.
 //=====================================================================================================================================================================
 // 3.2.12. Функция возвращает состояние отображения объёмов на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceGetShowVolume(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние отображения объёмов.
 //=====================================================================================================================================================================
 // 3.2.13. Функция возвращает состояние вида отображения цены на указанном графике.
 //         Вид отображаемой цены на графике: VS_BARS     бары;
 //                                           VS_CANDLES  японские свечи;
 //                                           VS_LINE     линия.
 int ServiceGetViewChart(int hwndChart); // Системный дескриптор окна графика, с которого возвращается состояние вид отображения цены.
 //=====================================================================================================================================================================
 // 3.3. Функции установки свойств графика.
 //=====================================================================================================================================================================
 // 3.3.1. Функция устанавливает состояние автопрокрутки на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetAutoScroll(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние автопрокрутки.
                           int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.2. Функция устанавливает состояние автономности указанного графика. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetOffline(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние автономности.
                        int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.3. Функция устанавливает шкалу на указанном графике.
 void ServiceSetScale(int    hwndChart, // Системный дескриптор окна графика, на котором устанавливается состояние "Фиксировать масштаб".
                      double dMaximum,  // Максимум шкалы.
                      double dMinimum); // Минимум шкалы.
 //=====================================================================================================================================================================
 // 3.3.4. Функция устанавливает состояние "Фиксировать масштаб" на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetScaleFix(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние "Фиксировать масштаб".
                         int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.5. Функция устанавливает состояние "Фиксировать масштаб 1:1" на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetScaleFix1To1(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние "Фиксировать масштаб 1:1".
                             int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.6. Функция устанавливает состояние "График сверху" на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetForeground(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние "График сверху".
                           int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.7. Функция устанавливает состояние смещения указанного графика. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShift(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние смещения.
                      int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.8. Функция устанавливает состояние отображения линии ASK на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShowAsk(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние отображения линии ASK.
                        int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.9. Функция устанавливает состояние отображения сетки на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShowGrid(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние отображения сетки.
                         int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.10. Функция устанавливает состояние отображения описания объектов на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShowObjectDescript(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние отображения описания объектов.
                                   int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.11. Функция устанавливает состояние отображения цен OHLC на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShowOHLC(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние отображения цен OHLC.
                         int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.12. Функция устанавливает состояние отображения разделителей периодов на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShowPeriodSeparators(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние отображения разделителей периодов.
                                     int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.13. Функция устанавливает состояние отображения объёмов на указанном графике. Функция возвращает установленное состояние элемента управления.
 bool ServiceSetShowVolume(int hwndChart,  // Системный дескриптор окна графика, на котором устанавливается состояние отображения объёмов.
                           int bProperty); // Значение свойства: FALSE - состояние отключено, TRUE - состояние включено.
 //=====================================================================================================================================================================
 // 3.3.14. Функция устанавливает вид отображения цены на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceSetViewChart(int hwndChart, // Системный дескриптор окна графика, на котором устанавливается вид отображения цены.
                          int nView);    // Вид отображаемой цены на графике: VS_BARS     бары;
                                         //                                   VS_CANDLES  японские свечи;
                                         //                                   VS_LINE     линия.
 //=====================================================================================================================================================================
 // 3.4. Универсальные и общие функции.
 //=====================================================================================================================================================================
 // 3.4.1. Функция открывает окно свойств указанного графика. Функция возвращает системный дескриптор окна свойств графика.
 int ServiceOpenPropertiesChart(int hwndChart,    // Системный дескриптор окна, для которого открывается окно свойств.
                                int nTabControl); // Номер активизируемой вкладки: 0 - "Цвета", 1 - "Общие".
 //=====================================================================================================================================================================
 // 3.4.2. Функция устанавливает и возвращает или только возвращает указанные свойства на указанном графике.
 void ServicePropertiesChartCheckBox(int  hwndChart,       // Системный дескриптор окна, для которого открывается окно свойств.
                                     int  bSet,            // Флаг изменения настройки элемента управления:
                                                           //   TRUE  - функция изменяет настройку, указанного параметром "dwControlId" элемента управления,
                                                           //           на значение параметра "bProperty";
                                                           //   FALSE - функция не изменяет настройку, но возвращает последнее значение указанного свойства.
                                     int &apbProperties[], // Массив структур идентификаторов элементов управления и их состояний. Массив модифицируется.
                                                           // Члены структуры:
                                                           //   DWORD dwControlId;  Идентификатор элемента управления.
                                                           //   BOOL  bProperty;    Значения числового свойства.
                                                           //   WORD  wDecimals;    Отображаемое количество знаков после запятой. Не используется.
                                                           // В MQL4-массиве структура выглядит ввиде 3-х последовательных INT значений. Необходимо выделять
                                                           // на каждый элемент три последовательные ячейки или использовать 2-х мерный массив.
                                     int  nCount);         // Количество изменяемых свойств графика. Размер массива структур "apbProperties[]".
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 4. ФУНКЦИИ ДЛЯ РАБОТЫ С ОКНОМ ГРАФИКА.
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 4.1. Функции для работы с клавишами на графике.
 //=====================================================================================================================================================================
 // 4.1.1. Функция управляет горячими клавишами на указанном графике.
 void ServiceChartHotKeys(int hwndChart, // Системный дескриптор окна, на котором применяются горячие клавиши.
                          int nKey,      // Код горячей клавиши 1.
                          int nKeyMod);  // Код горячей клавиши 2. Может быть только предопределённым значением:
                                         //  VK_SHIFT	    Кнопка SHIFT.
                                         //  VK_CONTROL	  Кнопка CTRL.
                                         //  VK_MENU	     Кнопка ALT.
                                         //  VK_LWIN	     Левая кнопка WINDOWS.
                                         //  VK_RWIN	     Правая кнопка WINDOWS.
 //=====================================================================================================================================================================
 // 4.1.2. Функция нажимает указанную клавишу на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceChartKeyDown(int hwndChart, // Системный дескриптор графика, на котором нажимается клавиша.
                          int nKey);     // Код клавиши.
 //=====================================================================================================================================================================
 // 4.1.3. Функция отжимает указанную клавишу на указанном графике. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceChartKeyUp(int hwndChart, // Системный дескриптор графика, на котором отжимается клавиша.
                        int nKey);     // Код клавиши.
 //=====================================================================================================================================================================
 // 4.2. Функции для работы с окном графика.
 //=====================================================================================================================================================================
 // 4.2.1. Функция закрывает все окна графиков.
 void ServiceCloseAllCharts();
 //=====================================================================================================================================================================
 // 4.2.2. Функция закрывает указанное окно графика. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceCloseChart(int hwndChart); // Системный дескриптор закрываемого окна графика.
 //=====================================================================================================================================================================
 // 4.2.3. Функция возвращает системный дескриптор активного окна графика и заполняет переданный массив системными дескрипторами всех открытых окон графиков.
 int ServiceGetAllHandlesCharts(int &ahwndCharts[], // Массив системных дескрипторов графиков.
                                int  nSize);        // Размер массива дескрипторов.
 //=====================================================================================================================================================================
 // 4.2.4. Функция контроллирует наличие графика по его системному дескриптору. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceIsChart(int hwndChart); // Системный дескриптор контроллируемого окна графика.
 //=====================================================================================================================================================================
 // 4.2.5. Функция возвращает наличие активности окна графика по его системному дескриптору. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceIsChartActive(int hwndChart); // Системный дескриптор контроллируемого окна графика.
 //=====================================================================================================================================================================
 // 4.2.6. Функция возвращает количество открытых окон графиков.
 int ServiceNumberCharts();
 //=====================================================================================================================================================================
 // 4.2.7. Функция делает окно графика активными.
 void ServiceSetActiveChart(int hwndChart); // Системный дескриптор активируемого окна графика.
 //=====================================================================================================================================================================
 // 4.3. Функции для работы с графиком.
 //=====================================================================================================================================================================
 // 4.3.1. Функция снимает выделения с графических объектов. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceDeselectObjects(int hwndChart); // Системный дескриптор окна графика, удаляемого эксперта.
 //=====================================================================================================================================================================
 // 4.3.2. Функция позиционирует график по левой границе на указанное время.
 void ServiceSetBar(int      hwndChart, // Системный дескриптор окна графика, куда загружается индикатор.
                    datetime lTime);    // Время бара у левой границы окна.
 //=====================================================================================================================================================================
 // 4.3.3. Функция сдвигает график на один бар влево.
 void ServiceStepByStep(int hwndChart); // Системный дескриптор окна графика, на котором сдвигается график.
 //=====================================================================================================================================================================
 // 4.3.4. Функция меняет размер баров на графике.
 bool ServiceZoom(int hwndChart, // Системный дескриптор окна графика, на котором меняется размер баров.
                  int bZoom);    // Направление изменения размеров баров: TRUE  - увеличение размера на один шаг;
                                 //                                       FALSE - уменьшение размера на один шаг.
 //=====================================================================================================================================================================
 // 4.4. Функции для установки шаблона графика.
 //=====================================================================================================================================================================
 // 4.4.1. Функция устанавливает на указанный график указанный шаблон по его имени в списке шаблонов.
 void ServiceSetTemplateByName(int    hwndChart,      // Системный дескриптор окна графика, куда загружается шаблон.
                               string sNameTemplate); // Имя шаблона в списке шаблонов.
 //=====================================================================================================================================================================
 // 4.4.2. Функция устанавливает на указанный график указанный шаблон по его номеру в списке шаблонов. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceSetTemplateByNumber(int hwndChart,  // Системный дескриптор окна графика, куда загружается шаблон.
                                 int nTemplate); // Номер шаблона в списке шаблонов. Шаблоны сортируются в списке по имени. Количество шаблонов ограниченно 64.
 //=====================================================================================================================================================================
 // 4.5. Функции для установки инструмента и периода графика.
 //=====================================================================================================================================================================
 // 4.5.1. Функция устанавливает указанный таймфрейм по его имени на указанном графике.
 void ServiceSetTimeframeByName(int    hwndChart, // Системный дескриптор окна графика, на котором устанавливается ТФ.
                                string sName);    // Имя устанавливаемого ТФ: "M1"    1 минута;
                                                  //                          "M5"    5 минут;
                                                  //                          "M15"  15 минут;
                                                  //                          "M30"  30 минут;
                                                  //                          "H1"    1 час;
                                                  //                          "H4"    4 часа;
                                                  //                          "D1"    1 день;
                                                  //                          "W1"    1 неделя;
                                                  //                          "MN1"   1 месяц.
 //=====================================================================================================================================================================
 // 4.5.2. Функция устанавливает указанный таймфрейм по его номеру на указанном графике.
 void ServiceSetTimeframeByNumber(int hwndChart,   // Системный дескриптор окна графика, на котором устанавливается ТФ.
                                  int nTimeFrame); // Номер устанавливаемого ТФ от 0 до 8.
 //=====================================================================================================================================================================
 // 4.5.3. Функция устанавливает указанный таймфрейм по его периоду на указанном графике.
 void ServiceSetTimeframeByPeriod(int hwndChart, // Системный дескриптор окна графика, на котором устанавливается ТФ.
                                  int nPeriod);  // Период устанавливаемого ТФ: PERIOD_M1       1  1 минута;
                                                 //                             PERIOD_M5       5  5 минут;
                                                 //                             PERIOD_M15     15  15 минут;
                                                 //                             PERIOD_M30     30  30 минут;
                                                 //                             PERIOD_H1      60  1 час;
                                                 //                             PERIOD_H4     240  4 часа;
                                                 //                             PERIOD_D1    1440  1 день;
                                                 //                             PERIOD_W1   10080  1 неделя;
                                                 //                             PERIOD_MN1  43200  1 месяц.
 //=====================================================================================================================================================================
 // 4.5.4. Функция устанавливает инструмент и/или таймфрейм по имени на указанном графике.
 void ServiceSetToolChartNamePeriod(int    hwndChart,     // Системный дескриптор окна графика, на котором устанавливается ТФ.
                                    string szSymbol,      // Имя инструмента в окне "Обзор рынка". Некорректное имя инструмента воспринимается, как отсутствие имени.
                                    string szNamePeriod); // Имя устанавливаемого ТФ. Некорректное имя периода воспринимается, как отсутствие имени.
                                                          // Возможные значения: "M1"    1 минута;
                                                          //                     "M5"    5 минут;
                                                          //                     "M15"  15 минут;
                                                          //                     "M30"  30 минут;
                                                          //                     "H1"    1 час;
                                                          //                     "H4"    4 часа;
                                                          //                     "D1"    1 день;
                                                          //                     "W1"    1 неделя;
                                                          //                     "MN1"   1 месяц.
 //=====================================================================================================================================================================
 // 4.5.5. Функция устанавливает инструмент и/или таймфрейм по номеру на указанном графике.
 void ServiceSetToolChartNumberPeriod(int    hwndChart,   // Системный дескриптор окна графика, на котором устанавливается ТФ.
                                      string sSymbol,     // Имя инструмента в окне "Обзор рынка". Некорректное имя инструмента воспринимается, как отсутствие имени.
                                      int    nTimeFrame); // Номер устанавливаемого ТФ от 0 до 8. Некорректный номер периода воспринимается, как отсутствие имени.
 //=====================================================================================================================================================================
 // 4.5.6. Функция устанавливает инструмент и/или таймфрейм по периоду на указанном графике.
 void ServiceSetToolChartPeriod(int    hwndChart, // Системный дескриптор окна графика, на котором устанавливается ТФ.
                                string szSymbol,  // Имя инструмента в окне "Обзор рынка". Некорректное имя инструмента воспринимается, как отсутствие имени.
                                int    nPeriod);  // Период устанавливаемого ТФ. Некорректное значение периода воспринимается, как отсутствие периода.
                                                  // Возможные значения: PERIOD_M1       1   1 минута;
                                                  //                     PERIOD_M5       5   5 минут;
                                                  //                     PERIOD_M15     15  15 минут;
                                                  //                     PERIOD_M30     30  30 минут;
                                                  //                     PERIOD_H1      60   1 час;
                                                  //                     PERIOD_H4     240   4 часа;
                                                  //                     PERIOD_D1    1440   1 день;
                                                  //                     PERIOD_W1   10080   1 неделя;
                                                  //                     PERIOD_MN1  43200   1 месяц.
 //=====================================================================================================================================================================
 // 4.6. Функции для работы с командной строкой графика.
 //=====================================================================================================================================================================
 // 4.6.1. Функция закрывает командную строку на указанном графике и посылает команду графику.
 void ServiceCloseCmd(int hwndChart); // Системный дескриптор окна графика, на котором закрывается командная строка.
 //=====================================================================================================================================================================
 // 4.6.2. Функция очищает поле командной строки на указанном графике.
 void ServiceClearCmd(int hwndChart); // Системный дескриптор окна графика, на котором очищается поле командной строки.
 //=====================================================================================================================================================================
 // 4.6.3. Функция создаёт командную строку на указанном графике, если её не было, или очищает поле текста командной строки, если она уже была создана.
 //        Функция возвращает системный дескриптор командной строки графика.
 int ServiceCreatCmd(int hwndChart); // Системный дескриптор окна графика, на котором создаётся командная строка.
 //=====================================================================================================================================================================
 // 4.6.4. Функция возвращает состояние наличия командной строки на указанном графике. Если командная строка существует, функция возвращает TRUE, иначе - FALSE.
 bool ServiceIsCmd(int hwndChart); // Системный дескриптор окна графика, на котором контроллируется наличие командной строки.
 //=====================================================================================================================================================================
 // 4.6.5. Функция возвращает состояние видимости командной строки на указанном графике. Если командная строка видима, функция возвращает TRUE.
 //        Если командная строка невидима или не существует функция возвращает FALSE.
 bool ServiceIsVisibleCmd(int hwndChart); // Системный дескриптор окна графика, на котором контроллируется видимость командной строки.
 //=====================================================================================================================================================================
 // 4.6.6. Функция создаёт или открывает командную строку на указанном графике. Функция возвращает системный дескриптор командной строки графика.
 int ServiceOpenCmd(int hwndChart); // Системный дескриптор окна графика, на котором открывается командная строка.
 //=====================================================================================================================================================================
 // 4.6.7. ФУНКЦИЯ читает текст в командной строке указанного графика.
 string ServiceReadCmd(int hwndChart); // Системный дескриптор окна графика, в котором читается текст в командной строке.
 //=====================================================================================================================================================================
 // 4.6.8. ФУНКЦИЯ заполняет текстом в командную строку на указанном графике.
 void ServiceWriteCmd(int    hwndChart, // Системный дескриптор окна графика, в котором заполняется командная строка.
                      string sText);    // Текст для заполнения командной строки.
 //=====================================================================================================================================================================
 // 4.7. Функции для управления обновлением графика.
 //=====================================================================================================================================================================
 // 4.7.1. ФУНКЦИЯ запускает обновление всех графиков с указанным периодом. Если обновление уже запущено, то функция меняет период обновления графиков.
 //        Останавливается обновление функциями "ServiceStopRefreshChart()" или "ServiceStopRefreshAllCharts()" или закрытием графика.
 void ServiceRefreshAllCharts(int nPeriodMilliSec); // Период обновления графика в миллисекундах.
 //=====================================================================================================================================================================
 // 4.7.2. ФУНКЦИЯ запускает обновление всех графиков однократно. Вызов функции при работающих других режимах останавливает обновление всех графиков.
 void ServiceRefreshAllOnceCharts();
 //=====================================================================================================================================================================
 // 4.7.3. ФУНКЦИЯ запускает обновление указанного графика с указанным периодом. Если обновление уже запущено, то функция меняет только период обновления графика.
 //        Останавливается обновление функциями "ServiceStopRefreshChart()" или "ServiceStopRefreshAllCharts()" или закрытием графика.
 void ServiceRefreshChart(int hwndChart,        // Системный дескриптор обновляемого графика.
                          int nPeriodMilliSec); // Период обновления графика в миллисекундах.
 //=====================================================================================================================================================================
 // 4.7.4. Функция останавливает обновление указанного графика.
 void ServiceStopRefreshChart(int hwndChart); // Системный дескриптор графика, на котором останавливается обновление.
 //=====================================================================================================================================================================
 // 4.7.5. Функция корректно останавливает обновление всех графиков при bTerminate = FALSE, иначе функция завершает обновление аварийно.
 void ServiceStopRefreshAllCharts(int bTerminate); // Флаг аварийной остановки потоков обновления графиков.
                                                   // FALSE - потоки останавливаются корректно, TRUE - потоки останавливаются аварийно.
 //=====================================================================================================================================================================
 // 4.7.6. Функция эммулирует тик для эксперта на указанном графике.
 void ServiceTickExpert(int hwndChart); // Системный дескриптор окна графика, для эмуляции тика для эксперта.
 //=====================================================================================================================================================================
 // 4.7.7. Функция эммулирует тик для индикаторов на указанном графике.
 void ServiceTickIndicators(int hwndChart); // Системный дескриптор окна графика, для эмуляции тика для индикаторов.
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 5. ФУНКЦИИ ДЛЯ РАБОТЫ С ОКНОМ "ОБЗОР РЫНКА".
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 5.1. ФУНКЦИЯ заполняет входной массив именами инструментов из окна "Обзор рынка" и возвращает их количество. В случае ошибки функция возвращает -1.
 int ServiceGetAllSymbols(string &asSymbols[],   // Одномерный массив для заполнения именами инструментов из окна "Обзор рынка".
                                                 // Массив должен быть инициализирован разными значениями в каждой ячейке!
                                                 // Это особенность инициализации строковых массивов в MQL4.
                          int     nSizeSymbols); // Размер массива с именами инструментов.
 //=====================================================================================================================================================================
 // 5.2. Функция возвращает количество инструментов в окне "Обзор рынка". В случае ошибки функция возвращает -1.
 int ServiceGetNumberTools();
 //=====================================================================================================================================================================
 // 5.3. Функция возвращает номер строки в окне "Обзор рынка" по началу имени инструмента. Если инструмент не найден, функция возвращает -1.
 int ServiceLineBySymbol(string sSymbol); // Имя инструмента в окне "Обзор рынка".
 //=====================================================================================================================================================================
 // 5.4. ФУНКЦИЯ открывает окно графика символа, расположенного в окне "Обзор рынка" по имени инструмента, и устанавливает период графика.
 //      Функция, в случае удачи, возвращает системный дескриптор открытого графика, иначе - NULL.
 int ServiceOpenChartByName(string sSymbol,     // Имя инструмента в окне "Обзор рынка".
                            string sTimeFrame); // Имя устанавливаемого ТФ:  ""     пустая строка или NULL не меняет ТФ открытого графика.
                                                //                          "M1"    1 минута;
                                                //                          "M5"    5 минут;
                                                //                          "M15"  15 минут;
                                                //                          "M30"  30 минут;
                                                //                          "H1"    1 час;
                                                //                          "H4"    4 часа;
                                                //                          "D1"    1 день;
                                                //                          "W1"    1 неделя;
                                                //                          "MN1"   1 месяц.
 //=====================================================================================================================================================================
 // 5.5. Функция открывает окно графика символа, расположенного в строке nLine окна "Обзор рынка".
 //      Функция, в случае удачи, возвращает системный дескриптор открытого графика, иначе - NULL.
 int ServiceOpenChartByNumber(int    nLine,      // Номер строки в окне "Обзор рынка".
                              string sBufSymbol, // Указатель на буфер для приёма имени инструмента, находящегося в указанной строке списка.
                              int    nSizeBuf);  // Размер буфера.
 //=====================================================================================================================================================================
 // 5.6. Функция возвращает имя инструмента по номеру строки в окне "Обзор рынка".
 string ServiceSymbolByLine(int nLine); // Номер строки в окне "Обзор рынка".
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 6. ФУНКЦИИ ДЛЯ РАБОТЫ С ОКНОМ "ТЕРМИНАЛ".
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 6.1. Общие функции для окна "Терминал".
 //=====================================================================================================================================================================
 // 6.1.1. ФУНКЦИЯ устанавливает активную вкладку окна "Терминал" по номеру вкладки.
 void ServiceSetTerminalTabByNumber(int nTabId); // Номер вкладки окна "Терминал".
 //=====================================================================================================================================================================
 // 6.1.2. ФУНКЦИЯ устанавливает активную вкладку окна "Терминал" по имени вкладки.
 void ServiceSetTerminalTabByName(string sNameTab); // Имя вкладки окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2. Функции для вкладки "Почтовый ящик".
 //=====================================================================================================================================================================
 // 6.2.1. ФУНКЦИЯ закрывает окно почтового сообщения по системному дескриптору окна сообщения.
 //        Функция возвращает TRUE, если сообщение поставлено в очередь, иначе - FALSE.
 bool ServiceMailboxCloseByHandle(int hwndMail); // Системный дескриптор окна сообщения.
 //=====================================================================================================================================================================
 // 6.2.2. ФУНКЦИЯ закрывает окно почтового сообщения по теме сообщения.
 //        Функция возвращает TRUE, если сообщение поставлено в очередь, иначе - FALSE.
 bool ServiceMailboxCloseByName(string sTitleMail); // Заголовок сообщения.
 //=====================================================================================================================================================================
 // 6.2.3. ФУНКЦИЯ удаляет почтовое сообщение из списка по номеру строки во вкладке "Почтовый ящик" окна "Терминал".
 //        В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceMailboxDelete(int nLine); // Номер строки вкладки "Почтовый ящик" окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2.4. ФУНКЦИЯ возвращает имя отправителя почтового сообщения во вкладке "Почтовый ящик" окна "Терминал" по номеру строки.
 string ServiceMailboxGetFrom(int nLine); // Номер строки вкладки "Почтовый ящик" окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2.5. ФУНКЦИЯ возвращает номер строки первого найденного почтового сообщения начиная с последнего (верха списка) во вкладке "Почтовый ящик" окна "Терминал"
 //        по времени, имени отправителя и заголовку сообщения. Функция возвращает -1, если сообщение не найдено.
 int ServiceMailboxGetLine(string sDataTime, // Время в формате "YYYY.MM.DD HH:MM". Можно указывать часть строки начиная с года или указывать пустую строку.
                           string sFrom,     // Имя отправителя сообщения. Можно указывать включаемое слово или пустую строку.
                           string sTheme,    // Заголовок сообщения. Можно указывать включаемое слово или пустую строку.
                           int    nStart,    // Номер строки с конца списка (верх списка), с которой начнётся поиск сообщения. Сообщения добавляются кверху списка.
                           int    nCount);   // Количество строк для поиска. Если параметр равен -1, поиск происходит до конца списка.
 //=====================================================================================================================================================================
 // 6.2.6. ФУНКЦИЯ возвращает время почтового сообщения во вкладке "Почтовый ящик" окна "Терминал" по номеру строки в виде строки формата "YYYY.MM.DD HH:MM".
 string ServiceMailboxGetStringTime(int nLine); // Номер строки вкладки "Почтовый ящик" окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2.7. ФУНКЦИЯ возвращает время почтового сообщения во вкладке "Почтовый ящик" окна "Терминал" по номеру строки в формате UNIXTIME.
 datetime ServiceMailboxGetTime(int nLine); // Номер строки вкладки "Почтовый ящик" окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2.8. ФУНКЦИЯ возвращает тему почтового сообщения во вкладке "Почтовый ящик" окна "Терминал" по номеру строки.
 string ServiceMailboxGetTheme(int nLine); // Номер строки вкладки "Почтовый ящик" окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2.9. ФУНКЦИЯ открывает окно с почтовым сообщением по номеру строки и возвращает системный дескриптор окна сообщения.
 int ServiceMailboxOpen(int nLine); // Номер строки вкладки "Почтовый ящик" окна "Терминал".
 //=====================================================================================================================================================================
 // 6.2.10. ФУНКЦИЯ читает текст в открытом окне почтового сообщения и возвращает указатель на него.
 string ServiceMailboxReadText(int hwndMail); // Системный дескриптор окна сообщения, возвращаемый функцией MailboxOpen().
 //=====================================================================================================================================================================
 // 6.2.11. ФУНКЦИЯ читает HTML текст в открытом окне почтового сообщения и возвращает указатель на него.
 string ServiceMailboxReadHTML(int hwndMail); // Системный дескриптор окна сообщения, возвращаемый функцией MailboxOpen().
 //=====================================================================================================================================================================
 // 6.2.12. ФУНКЦИЯ возвращает количество сообщений в списке.
 int ServiceMailboxSize();
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 7. ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ПРОГРАММАМИ MQL4.
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 7.1. Функция удаляет эксперт с указанного графика. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceDeleteExpert(int hwndChart); // Системный дескриптор окна графика, удаляемого эксперта.
 //=====================================================================================================================================================================
 // 7.2. ФУНКЦИЯ удаляет индикаторы по имени из списка загруженных индикаторов.
 void ServiceDeleteIndicatorsByName(int     hwndChart,         // Системный дескриптор окна, куда прикреплен индикатор.
                                    int     nWindow,           // Номер подокна для удаления индикаторов. Если -1, то удаляются индикаторы из всех подокон.
                                    string &asIndicatorName[], // Одномерный массив с именами удаляемых индикаторов.
                                    int     nNumberName);      // Количество имён индикаторов в массиве.
 //=====================================================================================================================================================================
 // 7.3. Функция удаляет скрипт с указанного графика. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceDeleteScript(int hwndChart); // Системный дескриптор окна графика, удаляемого скрипта.
 //=====================================================================================================================================================================
 // 7.4. Функция управляет диалоговым окном завершения скрипта и возвращает системный дескриптор диалогового окна завершения скрипта, если окно есть,
 //      иначе - NULL. Скрипт работает только с русской и английской локализациями.
 int ServiceDialogScript(int bInstruction); // Команда для диалогового окна завершения скрипта: TRUE - завершить скрипт, FALSE - не завершать скрипт.
 //=====================================================================================================================================================================
 // 7.5. Функция получает имена индикаторов из списка загруженных индикаторов.
 //      В случае успеха функция возвращает количество индикаторов в указанных подокнах параметром "nWindow", иначе ноль.
 int ServiceGetNamesIndicators(int     hwndChart,         // Системный дескриптор окна, куда прикреплен индикатор.
                               int     nWindow,           // Номер подграфика. Если -1, то считываются имена индикаторов из всех подокон.
                               string &asIndicatorName[], // Одномерный строковый массив для приёма имён индикаторов.
                                                          // Массив должен быть инициализирован разными значениями в каждой ячейке!
                                                          // Это особенность инициализации строковых массивов в MQL4.
                               int     nNumberName);      // Размер массива "asIndicatorName[]" для приёма имён индикаторов.
 //=====================================================================================================================================================================
 // 7.6. Функция вызывает окно списка индикаторов.
 bool ServiceListIndicators(int hwndChart); // Системный дескриптор окна графика, на котором вызывается окно списка индикаторов.
 //=====================================================================================================================================================================
 // 7.7. Функция загружает на указанный график пользовательский индикатор по его имени. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceLoadCustomIndicator(int    hwndChart,       // Системный дескриптор окна графика, куда загружается индикатор.
                                 string szNameIndicator, // Имя загружаемого индикатора.
                                 int    bOK);            // Подтверждение запуска индикатора, при наличии диалогового окна свойств индикатора.
                                                         // TRUE - автонажатие на кнопку "OK" разрешено, FALSE - автонажатие на кнопку "OK" запрещено.
 //=====================================================================================================================================================================
 // 7.8. Функция загружает на указанный график эксперт по его имени. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceLoadExpert(int    hwndChart,    // Системный дескриптор окна графика, куда загружается эксперт.
                        string szNameExpert, // Имя загружаемого эксперта.
                        int    bOK);         // Подтверждение запуска эксперта, при наличии диалогового окна свойств эксперта.
                                             // TRUE - автонажатие на кнопку "OK" разрешено, FALSE - автонажатие на кнопку "OK" запрещено.
 //=====================================================================================================================================================================
 // 7.9. Функция загружает на указанный график скрипт по его имени. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceLoadScript(int    hwndChart,    // Системный дескриптор окна графика, куда загружается скрипт.
                        string szNameScript, // Имя загружаемого скрипта.
                        int    bOK);         // Подтверждение запуска скрипта, при наличии диалогового окна свойств скрипта. Скрипт может не иметь окна свойств!
                                             // При использовании функции для загрузки скрипта из скрипта на текущем графике параметр не работает из-за
                                             // невозможности одновременной работы двух скриптов на одном графике.
                                             // TRUE - автонажатие на кнопку "OK" разрешено, FALSE - автонажатие на кнопку "OK" запрещено.
 //=====================================================================================================================================================================
 // 7.10. Функция загружает на указанный график стандартный индикатор по его имени. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceLoadStdIndicator(int    hwndChart,       // Системный дескриптор окна графика, куда загружается индикатор.
                              string szNameIndicator, // Имя загружаемого индикатора.
                              int    bOK);            // Подтверждение запуска индикатора, при наличии диалогового окна свойств индикатора.
                                                      // TRUE - автонажатие на кнопку "OK" разрешено, FALSE - автонажатие на кнопку "OK" запрещено.
 //=====================================================================================================================================================================
 // 7.11. Функция вызывает меню свойств эксперта. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServicePropertiesExpert(int hwndChart); // Системный дескриптор окна графика, на котором вызывается меню свойств эксперта.
 //=====================================================================================================================================================================
 // 7.12. Функция включает/отключает эксперты, управляя кнопкой "Советники".
 void ServiceSetExperts();
 //=====================================================================================================================================================================
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 // 8. СЕРВИСНЫЕ ФУНКЦИИ.
 //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 //=====================================================================================================================================================================
 // 8.1. Функция заполняет массив, который содержит системный дескриптор окна, где находится курсор, экранные и клиентские координаты курсора, цвет пикселя,
 //      на который указывает курсор.
 //      Если указан размер массива меньшим, чем для получения полной информации, то массив заполняется только той информацией, для которой указан размер.
 void ServiceGetCursorInfo(int &aiCursorInfo[], // Массив с координатами курсора.
                                                // aiCursorInfo[0] - Системный дескриптор окна, где находится курсор.
                                                // aiCursorInfo[1] - Экранная координата X курсора.
                                                // aiCursorInfo[2] - Экранная координата Y курсора.
                                                // aiCursorInfo[3] - Клиентская координата X курсора.
                                                // aiCursorInfo[4] - Клиентская координата Y курсора.
                                                // aiCursorInfo[5] - Цвет пикселя, на который указывает курсор.
                                                //                   Получает цвет равным -1 или 0xFFFFFFFF, если курсор находится за пределами рабочей области.
                           int  nSize);         // Размер массива.
 //=====================================================================================================================================================================
 // 8.2. Функция возвращает последнее введённое (в окне ввода логина и пароля) имя сервера.
 string ServiceGetNameServer();
 //=====================================================================================================================================================================
 // 8.3. Функция подкачивает котировки нажатием кнопки "HOME" и обновлением окна графика указанных ТФ каждого инструмента из окна "Обзор рынка".
 //      Функция возвращает при запуске сканирования 0, в остальных случаях 1. В случае ошибки функция возвращает -1 и вырабатывает исключение.
 //      Параметр szNameScript принимается только при первом запуске функции. При вторичных вызовах функции параметрами nLoading, bMode, abScanTF можно управлять сканированием.
 //      Параметры bMode, abScanTF принимаются к исполнению только при nLoading = MLQ_CONTINUED.
 int ServiceLoaderQuotes(int    nLoading,      // Управление загрузкой котировок:
                                               //  MLQ_STOP_TF    прекращение загрузки котировок по текущему ТФ и переход к следующему инструменту
                                               //                 или ТФ в зависимости от параметра "bMode";
                                               //  MLQ_CONTINUED  загрузка котировок по текущему ТФ продолжается;
                                               //  MLQ_FINISH     завершение функции потока.
                         int    bMode,         // Порядок сканирования инструментов:
                                               // TRUE  - сканирования производится на каждый инструмент по всем ТФ;
                                               // FALSE - сканирования производится на каждый ТФ по всем инструментам.
                         int    abScanTF[9],   // Массив с флагами сканируемых ТФ. Массив должен иметь размер не менее 9 ячеек.
                         string szNameScript); // Имя скрипта-датчика для передачи флага прекращения обновления графика и переключения на другой инструмент или ТФ.
 //=====================================================================================================================================================================
 // 8.4. ФУНКЦИЯ вводит счёт, пароль и имя сервера.
 void ServiceLogin(int    nLogin,      // Номер счёта. Если не вводить номер счёта (nLogin = 0), будет использована последняя комбинация логин-пароль-сервер.
                   string sPassword,   // Пароль. Если пароль есть по умолчанию в окне, то можно указать пустую строку.
                   string sNameServer, // Имя сервера. Если имя сервера есть по умолчанию в окне, то можно указать пустую строку.
                   int    bStoreInfo); // Хранить личную информацию - TRUE. Не хранить личную информацию - FALSE.
 //=====================================================================================================================================================================
 // 8.5. Функция открывает окно удалённого графика и возвращает его системный дескриптор.
 int ServiceOpenDeletetChart(int nChart); // Номер графика в списке удалённых графиков.
 //=====================================================================================================================================================================
 // 8.6. ФУНКЦИЯ открывает окно автономного графика. Функция, в случае удачи, возвращает системный дескриптор открытого графика, иначе - NULL.
 int ServiceOpenOfflineChart(string sSymbol,  // Имя инструмента.
                             string sPeriod); // Период. Примеры: M1, M2, M5, H1, H12, Daily, Weekly, Monthly, D90, D360, D1440.
 //=====================================================================================================================================================================
 // 8.7. Функция пересканирования серверов. В случае успеха функция возвращает TRUE, иначе - FALSE.
 bool ServiceRescanServers();
 //=====================================================================================================================================================================
 // 8.8. Функция является датчитком прекращения загрузки котировок функцией "ServiceLoaderQuotes()".
 //      Вызов функции прекращает загрузку котировок текущего инструмента или ТФ, и начинает следующий инструмент или ТФ.
 void ServiceSensorLoadQuotes(int hwndChart); // Системный дескриптор окна графика, на котором загружается история котировок.
 //=====================================================================================================================================================================
#import
//жжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжжж
/*
07.11.2010. Версия 0.11.7.1.
1. Функция ServiceNoAutoScroll() переименована в ServiceAutoScroll().
2. Функция ServiceSetActiveChart() переименована в ServiceActiveChart(). 
3. Сделана обработка исключений.
4. В функциях установки ТФ исправлена ошибка установки ТФ H1.
5. В функциях установки ТФ изменён тип возвращаемого значения на VOID.
6. В функции ServiceOpenChart() добавлен параметр принимающий имя инструмента.
7. Добавлены функции ServiceDeleteIndicatorsByName(), ServiceHotKeysChart(), ServiceIsChart(), ServiceKeyChart(), ServiceKeyTerminal(), ServiceLogin(), ServiceNumberTools(), ServiceOpenChartByNumber(), ServiceOpenChartByName(), ServiceOpenOfflineChart().

08.11.2010. Версия 0.11.8.3.
1. Добавлена функция ServiceGetAllSymbols(). Функция работает с памятью. Файл не читает. По этому работает очень быстро.
2. Убраны лишние исключения.

01.12.2010. Версия 0.12.1.1.
1. Функции сгруппированы по назначению. Слишком много их теперь.
2. Исправлена "ошибка". На некоторых ОС не работали функции основанные на поиске окна по имени класса (на разных ОС разные классы одних и тех же окон!!!). Все выявленные случаи учтены. Сообщайте о новых!
3. Изменено имя функции ServiceActiveChart() на ServiceSetActiveChart().
4. Изменено имя функции ServiceNumberTools() на ServiceGetNumberTools(). 
5. Добавлены функции ServiceGetNameServer(), ServiceOpenDeletetChart(), ServiceSetTemplateByName(), ServiceSetTemplateByNumber().

05.12.2010. Версия 0.12.5.1. 
1. Добавлены функции ServiceTerminalClose(), ServiceTerminalHide(), ServiceTerminalMaximize(), ServiceTerminalMinimize(), ServiceTerminalRestore(), ServiceTerminalShow(), ServiceLoadingQuotes().
2. Отменена ошибочно установленная защита на функцию ServiceOpenChartByNumber().

06.12.2010. Версия 0.12.6.1.
1. Попытка ускорить некоторые функции не удалась. Иногда возвращают не тот дескриптор. Вернул старый вариант получения дескрипторов.

09.02.2011. Версия 1.2.9.1.
1. Добавлены функции ServiceDeinit(), ServiceInit(), ServiceGetLocalization(), ServiceSensorLoadQuotes(). 
2. Добавлен параметр для управления диалоговым окном свойств загружаемых программ в функциях: ServiceLoadCustomIndicator(), ServiceLoadExpert(), ServiceLoadScript(), ServiceLoadStdIndicator().
3. Исправлена ошибка инициализации библиотеки на некоторых ОС Windows XP.
4. Сделана возможность управления терминалом в удалённом процессе.

05.04.2011. Версия 1.4.5.1.
1. Добавлены функции: ServiceOpenGlobalVariables(), ServiceOpenHistoryCenter(), ServiceOpenOptions(), ServiceShift(), ServiceShowGrid(), ServiceShowVolume(), ServiceGetAutoScroll(), ServiceGetScaleFix(), ServiceGetScaleFix1To1(), ServiceGetForeground(), ServiceGetOffline(), ServiceGetShift(), ServiceGetShowAsk(), ServiceGetShowGrid(), ServiceGetShowObjectDescript(), ServiceGetShowOHLC(), ServiceGetShowPeriodSeparators(), ServiceGetShowVolume(), ServiceGetViewChart(), ServiceSetAutoScroll(), ServiceSetOffline(), ServiceSetScale(), ServiceSetScaleFix(), ServiceSetScaleFix1To1(), ServiceSetForeground(), ServiceSetShift(), ServiceSetShowAsk(), ServiceSetShowGrid(), ServiceSetShowObjectDescript(), ServiceSetShowOHLC(), ServiceSetShowPeriodSeparators(), ServiceSetShowVolume(), ServiceSetViewChart(), ServiceOpenPropertiesChart(), ServicePropertiesChartCheckBox(), ServiceStepByStep(), ServiceGetNamesIndicators().
2. Исправлены функции: ServiceOpenChartByName(), ServiceListIndicators(), ServiceDeleteIndicatorsByName(), ServiceAutoScroll().
3. Изменены коды локализаций под последний релиз МТ4 (392).
4. Изменён возвращаемый тип у функции ServiceLogin().

03.05.2011. Версия 1.5.3.1.
1. Добавлены функции: ServiceGetPathTerminal(), ServiceGetAllHandlesCharts(), ServiceSetToolChartNamePeriod(), ServiceSetToolChartNumberPeriod(), ServiceSetToolChartPeriod(). 
2. Добавлен параметр в функцию ServiceOpenChartByNumber().

05.10.2011. Версия 1.10.5.1.
1. Добавлены функции: ServiceHideDataWindow(), ServiceHideMarketWatch(), ServiceHideNavigator(), ServiceHideTerminal(), ServiceHideTester(),
                      ServiceShowDataWindow(), ServiceShowMarketWatch(), ServiceShowNavigator(), ServiceShowTerminal(), ServiceShowTester(), ServiceIsChartActive(), ServiceChartKeyUp(), ServiceSetTerminalTabByNumber(), ServiceSetTerminalTabByName(), ServiceMailboxCloseByHandle(),
                      ServiceMailboxCloseByName(), ServiceMailboxDelete(), ServiceMailboxGetFrom(), ServiceMailboxGetLine(), ServiceMailboxGetStringTime(), ServiceMailboxGetTime(), ServiceMailboxGetTheme(), ServiceMailboxOpen(), ServiceMailboxReadText(), ServiceMailboxReadHTML(),
                      ServiceCloseCmd(), ServiceIsVisibleCmd(), ServiceOpenCmd(), ServiceReadCmd(), ServiceWriteCmd(),
                      ServiceRefreshAllCharts(), ServiceRefreshAllOnceCharts(), ServiceRefreshChart(), ServiceStopRefreshChart(), ServiceStopRefreshAllCharts(),
                      ServiceHandleMT4(), ServiceSetAccountNumber(), ServiceGetCursorPos().
2. Переименованы функции: ServiceGetPathTerminal(), ServiceTerminalClose(), ServiceTerminalHide(), ServiceTerminalMaximize(), ServiceTerminalMinimize(), ServiceTerminalRestore(), ServiceTerminalShow(), ServiceHotKeysTerminal(), ServiceKeyTerminal(), ServiceHotKeysChart(), ServiceKeyChart().
   Соответственно в: ServiceGetPathMT4(), ServiceMetaTraderClose(), ServiceMetaTraderHide(), ServiceMetaTraderMaximize(), ServiceMetaTraderMinimize(), ServiceMetaTraderRestore(), ServiceMetaTraderShow(), ServiceMetaTraderHotKeys(), ServiceMetaTraderKeyDown(), ServiceChartHotKeys(), ServiceChartKeyDown().
3. Изменён тип возвращаемого значения с VOID на BOOL у функций: ServiceMetaTraderClose(), ServiceMetaTraderHide(), ServiceMetaTraderMaximize(), ServiceMetaTraderMinimize(), ServiceMetaTraderRestore(), ServiceMetaTraderShow().
4. Уменьшено количество параметров в функции ServiceSymbolByLine() до одного.
5. Исправлены ошибки в функциях: ServicePropertiesChartCheckBox(), ServiceSetTemplateByName().

05.10.2011. Версия 1.11.22.1.
1. Исправлена ошибка в функци ServiceDeleteIndicatorsByName() при удалении индикатор из конкретного подокна.
2. Доработаны для более надёжного запуска программ MQL4 функции: ServiceLoadCustomIndicator(), ServiceLoadExpert(), ServiceLoadScript(), ServiceLoadStdIndicator().
3. Добавлена константа для монгольского языка и исправлены константы для остальных языков под билд 409.

11.03.2012. Версия 2.3.11.2.
1. Библиотека адаптирована под билд МТ4 416 с сохранением совместимости со старыми билдами.
2. Ускорена инициализация библиотеки в 10 раз.
3. Исправлены ошибки в функциях для работы с окном графика.
4. Добавлены функции: ServiceGetProcessId(); ServiceMetaTraderTitle(), ServiceNumberCharts().

04.04.2012. Версия 2.4.4.1.
1. Исправлены ошибки в системе обновления окон графика (функции группы 4.7.). После отмены обновления окна повторный запуск обновления не обрабатывался.

17.07.2012. Версия 2.7.17.1.
1. Добавлена функция: ServiceGetPathServer().
2. Переименована функция ServiceGetPathMT4() в ServiceGetPathDirectoryMT4().

22.09.2012. Версия 2.9.22.3.
1. Библиотека адаптирована под билд МТ4 438 с сохранением совместимости со старыми билдами.
2. Усовершенствован алгоритм определения локализации МТ4.
*/